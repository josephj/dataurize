#!/usr/bin/php
<?php
/**
 * Command line interface for converting CSS file with background images into MHTML & DataURI using base64 encoding.
 * So all separate HTTP requests for individual images will become only one request.
 *
 * @author Joseph Chiang <josephj6802@gmail.com>
 * @package dataurize
 *
 * ./dataurize <input> <base> [--output]
 */


function print_usage($path)
{
    echo "Usage: dataurize <input> <base> [options]\n" .
         "\n";
    echo "    --output=<output>   Assign an output file. By default it overwrites your original file.\n";
    echo "    --showonly          Show dataurized code in console instead of generating or overwriting a file.\n";
    echo "    --separate=<output> Separate MHTML to a single file.\n";
    echo "    --help              Show this help.\n" .
         "\n";
    echo "Sample: dataurize foo.css http://bar.com/ --output=foo2.css\n\n";
    exit;
}

function handle_exception($ex)
{
    die("Error: ".$ex->getMessage()."\n");
}


set_exception_handler("handle_exception");

// CONSTANTS
define("SEPARATOR", "_MY_BOUNDARY_SEPARATOR");

// Provide usage if user provides no arguments.
$path = array_shift($argv);
if ( ! count($argv))
{
    print_usage($path);
    exit;
}

// Check if arguments is enough.
if (count($argv) < 2)
{
    throw new Exception("You need at lease provide two arguments. One is for input file, and the other is for base URL.");
}

// Check if file exists.
$file = array_shift($argv);
if ( ! file_exists($file))
{
    throw new Exception("File you provide doesn't exist. Please check again.");
}

// Get base URL.
$base = array_shift($argv);
$is_show_only = FALSE;
$output = $file;
$separate = false;
while ($arg = array_shift($argv))
{
    $num = preg_match('/(-{1,2}\w+)(=[\w_\.\/\-]+)*/', $arg, $matches);
    if ( ! $num)
    {
        continue;
    }
    if (count($matches) === 3)
    {
        $val = str_replace("=", "", $matches[2]);
    }
    switch ($matches[1])
    {
    // Get output file.
    case "-o":
    case "--output":
        $output = $val;
        break;
    case "--separate":
        $separate = $val;
        break;
    case "--showonly":
        $is_show_only = TRUE;
        break;
    case "-h":
    case "--help":
        print_usage($path);
        exit;
        break;
    }
}

// Fetch all the background image attributes using RegExp.
$content = file_get_contents($file);
$pattern = '/background[^;}]*:[^;}]*url\(([^\)]+)\)[^;}]+/';
preg_match_all($pattern, $content, $data);
$attrs = $data[0];
$urls = $data[1];
$uris = array();
$mhtmls = array();

// Build temporary directory.
$tmp_path = microtime();
$tmp_path = substr(md5($tmp_path), 0, 8);
$tmp_path = "/tmp/$tmp_path/";
mkdir($tmp_path);

for ($i = 0, $j = count($attrs); $i < $j; $i++)
{
    // Make shortcuts.
    $url = $urls[$i];
    $attr = $attrs[$i];

    // Get all the images files.
    if (strpos($url, "http") === 0)
    {
        $target = $url;
    }
    else
    {
        $target = "{$base}{$url}";
    }
    $filename = pathinfo($target);
    $filename = "{$filename["filename"]}.{$filename["extension"]}";
    try 
    {
        $cmd = "curl $target -s > {$tmp_path}{$filename}";
        exec($cmd, $return, $error);
        if ($error)
        {
            continue;
        }
    } 
    catch (Exception $e) 
    {
        continue;
    }

    // Get file MIME/TYPE.
    $tempfile = $tmp_path.$filename;
    $cmd = "/usr/bin/identify -quiet -format \"%m\" $tempfile";
    try 
    {
        exec($cmd, $return, $error);                                    
        $type = ($error === 0) ? mb_strtolower($return[0]) : "png"; 
        if ($error)
        {
            continue;
        }
    }
    catch (Exception $e) 
    {
        continue;
    }

    // Get both MHTML and DataURI strings.
    try
    {
        $encode = base64_encode(file_get_contents($tempfile)); 
    }
    catch (Exception $e) 
    {
        continue;
    }
    $uris[$i] = str_replace($url, "data:image/$type;base64," . $encode, $attr);
    $uris[$i].= ($separate ? ";*background-image:url(mhtml:{$base}{$separate}!{$i})" : ";*background-image:url(mhtml:{$base}{$output}!{$i})"); 

    $mhtmls[] = "--" . SEPARATOR . "\nContent-Location:{$i}\nContent-Transfer-Encoding:base64\n\n" . $encode . "\n\n";
}

// New CSS file content.
if ( ! $separate)
{
    $content = "/*\nContent-Type: multipart/related; boundary=\"" . SEPARATOR . "\"\n\n" . implode($mhtmls, "") . "--".SEPARATOR."--\n*/\n" . $content;
}
$content = str_replace($attrs, $uris, $content);

// Remove temporary directory.
$cmd = "rm -rf $tmp_path";
exec($cmd, $return, $error);

// Output to console directly.
if ($is_show_only)
{
    echo $content . "\n";
}
else
{
    file_put_contents($output, $content);
    if ($separate)
    {
        $content = "/*\nContent-Type: multipart/related; boundary=\"" . SEPARATOR . "\"\n\n" . implode($mhtmls, "") . "--".SEPARATOR."--\n*/";
        file_put_contents($separate, $content);
    }
}

exit;
?>
